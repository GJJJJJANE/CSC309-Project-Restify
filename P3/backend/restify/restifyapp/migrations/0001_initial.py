# Generated by Django 4.1.7 on 2023-03-12 19:46

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=16, validators=[django.core.validators.MinLengthValidator(8, 'Password is too short')])),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('avatar', models.URLField()),
                ('phone_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(code='nomatch', message='Please Enter a Valid Phone Number', regex='[0-9]{10}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField()),
                ('photos', models.ImageField(upload_to='Photos')),
                ('location', models.TextField()),
                ('num_guest', models.PositiveIntegerField()),
                ('num_bedroom', models.PositiveIntegerField()),
                ('num_bathroom', models.PositiveIntegerField()),
                ('room_description', models.TextField()),
                ('amen_essential', multiselectfield.db.fields.MultiSelectField(choices=[('wi', 'Wifi'), ('hw', 'Hot Water'), ('ai', 'Air Conditioning')], max_length=3)),
                ('amen_indoor', multiselectfield.db.fields.MultiSelectField(choices=[('tv', 'TV'), ('pw', 'Personal Workspace'), ('li', 'Light')], max_length=3)),
                ('amen_outdoor', multiselectfield.db.fields.MultiSelectField(choices=[('pa', 'Parking Space'), ('bb', 'BBQ Grill'), ('ba', 'Backyard')], max_length=3)),
                ('house_rule', models.TextField()),
                ('safety_rule', models.TextField()),
                ('cancellation_policy', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('price', models.PositiveIntegerField()),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.CreateModel(
            name='PropertyComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('score', models.PositiveIntegerField()),
                ('modified', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('pe', 'Pending'), ('de', 'Denied'), ('ex', 'Expired'), ('ap', 'Approved'), ('ca', 'Canceled'), ('te', 'Terminated'), ('co', 'Completed'), ('pc', 'Waiting for cancellation to be confirmed'), (None, 'Reservation status')], max_length=2)),
                ('start', models.DateField()),
                ('end', models.DateField()),
                ('active', models.BooleanField(default=True)),
                ('guest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restifyapp.property')),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='ReplyThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_response', models.TextField()),
                ('user_response', models.TimeField(blank=True, default='', null=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('target', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reply_of', to='restifyapp.propertycomment')),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.AddField(
            model_name='propertycomment',
            name='target',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='comment_of', to='restifyapp.reservation'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('time', models.DateTimeField()),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='GuestComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField()),
                ('content', models.TextField()),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
    ]
